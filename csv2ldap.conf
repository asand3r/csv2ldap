[MAIN]
# Main section with global parameters
# Quantity of seconds between the script circles
WaitSeconds                 = 10


[LDAP]
# Parameters to interaction with LDAP
# LDAP server
Server                      = LDAPSERVER
# User which we will use to connect (must have sufficient rights to update objects in LDAP)
UserName                    = DOMAIN\USERNAME
# It's password (yeap, not encrypted yet, sorry)
Password                    = PASSWORD
# LDAP filter to find all of objects what we must to update
SearchFilter                = (&(objectCategory=person)(objectclass=user)(employeeID=*))
# List of attributes, which should be update from CSV
UpdateLdapAttrs             = sn,givenName,middleName,mobile,title,description,initials,department,telephoneNumber,physicalDeliveryOfficeName,manager,displayName


[CSV]
# How to works with CSV
# Where CSV file is stores
DataPath                    = /path/to/data.csv
# Field delimiter
Delimiter                   = ;
# File encoding (https://docs.python.org/3/library/codecs.html)
Encoding                    = utf-8-sig


[LOGGING]
# Just logging section, nothing more
# Path to log file (directory must be writable)
FilePath                    = /path/to/csv2ldap.log
# Max log file size per file in bytes
FileSize                    = 1048576
# Log files count before rotation
Rotation                    = 5
# Log level: NONSET, DEBUG, INFO, WARNING, ERROR, CRITICAL
Level                       = INFO


[EXCEPTIONS]
# Users exception list
# Format:
# employeeID = attribute_should_not_be_update (use ',' as delimiter if there are more than one attributes)
0000000846                  = manager
0000000371                  = title,department
0000000953                  = department
0000000865                  = department

[ATTR MATCHING]
# Next section uses for set match between columns in CSV and attributes in LDAP if they are not agreed
# But you can just name columns right as LDAP attributes and do not use this section
# Format:
# LDAP_attr = CSV_Column_Name
sn                          = Surname
givenName                   = GivenName
middleName                  = MiddleName
physicalDeliveryOfficeName  = Office
telephoneNumber             = ShortPhoneNumber
mobile                      = MobilePhone
title                       = JobTitle
department                  = Department
manager                     = ManagerEmployeeID
employeeID                  = EmployeeID

[PREPROCESSING]
# Making preprocessing of CSV data. Can be 'capitalize', 'lower', 'upper' and 'title' for string data.
# Also you can make a replace with functionality of 're' python module.
# This action needs to structure like this: replace('REGEXP', 'new_substring')
# Examples:
# Capitalize all 'sn' attributes:
# sn                          = capitalize
# Replace '- ' pattern to '-' and '(495)' at beginning with '+7 (495)':
# telephoneNumber             = replace('- ', '-'),('^\(495\)', '+7 (495)')
telephoneNumber             = replace('- ', '-'),('^\(495\)', '+7 (495)')
department                  = replace('\s$', '')